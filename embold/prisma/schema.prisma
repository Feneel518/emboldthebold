generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  image      String?
  isActive   Boolean  @default(false)
  showOnHome Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Int?

  parentId    String?    @db.ObjectId
  parent      Category?  @relation("ParentCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategory Category[] @relation("ParentCategory")

  CategoriesOnProducts CategoriesOnProducts[]
  FirstSection         FirstSection?
  SecondSection        SecondSection?
  ThirdSection         ThirdSection?
  FourthSection        FourthSection?
  FifthSection         FifthSection?
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description Json?
  slug        String   @unique
  slugNew     String?
  isActive    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  size        String[]
  colour      Json[]
  showOnHome  Boolean  @default(false)
  deleted     Boolean  @default(false)

  categoriesOnProducts CategoriesOnProducts[]

  Inventory Inventory[]

  Image              Image[]
  WishlistOnProducts WishlistOnProducts[]
}

model CategoriesOnProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Image {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  altText String

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Quantity {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int    @default(0)

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @unique @db.ObjectId
}

model Inventory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  price           Float
  discountedPrice Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  Sku String @unique

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  Quantity Quantity?

  AttributesOnInventory AttributesOnInventory[]
  InventoryOnOrders     InventoryOnOrders[]
}

model AttributesOnInventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [value])
  attributeValueId String

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @db.ObjectId
}

model Attribute {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  AttributeValue AttributeValue[]
}

model AttributeValue {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  value String  @unique
  name  String?

  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String    @db.ObjectId

  AttributesOnInventory AttributesOnInventory[]
}

//////////////////////////////////////////////////
model FirstSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  isActive   Boolean
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique @db.ObjectId
}

model SecondSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  isActive   Boolean
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique @db.ObjectId
}

model ThirdSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  isActive   Boolean
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique @db.ObjectId
}

model FourthSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  isActive   Boolean
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique @db.ObjectId
}

model FifthSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  isActive   Boolean
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique @db.ObjectId
}

// 

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  mobileImage String?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  comment String
  image   String
}

model NewsLetter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////////////////////////////////////////////
model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  email              String               @unique
  name               String?
  password           String?
  phoneNumber        String?
  image              String?
  isAdmin            Boolean              @default(false)
  active             Boolean              @default(false)
  emailVerified      Boolean?
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  ActivateToken      ActivateToken[]
  PasswordResetToken PasswordResetToken[]
  Account            Account[]
  Session            Session[]
  Orders             Orders[]
  Address            Address[]
  Wishlist           Wishlist?
}

model PasswordResetToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  token     String    @unique
  createdAt DateTime  @default(now())
  reset     DateTime?
  isReset   Boolean   @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model ActivateToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  activatedAt DateTime?
  activated   Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Orders {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  email             String
  orderItem         Json[]
  isOnline          Boolean
  paid              Boolean
  userName          String?
  userPhone         String?
  amount            Float?
  paymentIntentId   String   @unique
  paymentRazorpayId String?
  courierName       String?
  courierDocketId   String?

  InventoryOnOrders InventoryOnOrders[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  status Status? @default(ORDERED)

  Address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @db.ObjectId
}

enum Status {
  ORDERED
  IN_TRANSIT
  DELIVERED
  DELIVERY_UNSUCCESSFUL
  EXCHANGE_RETURN_INITIATED
  PRODUCT_PICKED_UP
  PRODUCT_RECEIVED
  REFUND_INITIATED
  REFUND_ON_HOLD
  REFUNDED
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  country      String
  firstName    String
  lastName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  pinCode      String
  phoneNumber  String?
  isDefault    Boolean @default(false)

  user   User?    @relation(fields: [userId], references: [id])
  userId String?  @db.ObjectId
  Orders Orders[]
}

model InventoryOnOrders {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @db.ObjectId
  order       Orders    @relation(fields: [ordersId], references: [id])
  ordersId    String    @db.ObjectId
  quantity    Int
  price       Int
}

model Wishlist {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique @db.ObjectId
  WishlistOnProducts WishlistOnProducts[]
}

model WishlistOnProducts {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  Wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String   @db.ObjectId
  Product    Product  @relation(fields: [productId], references: [id])
}

model colours {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  label String
  value String
}
